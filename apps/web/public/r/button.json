{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:component",
  "title": "Button",
  "description": "A button component",
  "registryDependencies": [],
  "files": [
    {
      "path": "src/registry/components/button.tsx",
      "content": "import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        valid: \"bg-valid text-valid-foreground hover:bg-valid/90\",\n        warning: \"bg-warning text-warning-foreground hover:bg-warning/90\",\n        info: \"bg-info text-info-foreground hover:bg-info/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, ...props }, ref) => {\n    return (\n      <button\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "type": "registry:component",
      "target": "components/utilui/button.tsx"
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "colors": {
            "valid": {
              "DEFAULT": "hsl(var(--valid))",
              "foreground": "hsl(var(--valid-foreground))"
            },
            "warning": {
              "DEFAULT": "hsl(var(--warning))",
              "foreground": "hsl(var(--warning-foreground))"
            },
            "info": {
              "DEFAULT": "hsl(var(--info))",
              "foreground": "hsl(var(--info-foreground))"
            }
          }
        }
      }
    }
  },
  "cssVars": {
    "light": {
      "valid": "142.1 70.6% 45.3%",
      "valid-foreground": "0 0% 100%",
      "warning": "24.6 95% 53.1%",
      "warning-foreground": "0 0% 100%",
      "info": "217.2 91.2% 59.8%",
      "info-foreground": "0 0% 100%"
    },
    "dark": {
      "valid": "142.1 76.2% 36.3%",
      "valid-foreground": "0 0% 100%",
      "warning": "20.5 90.2% 48.2%",
      "warning-foreground": "0 0% 100%",
      "info": "221.2 83.2% 53.3%",
      "info-foreground": "0 0% 100%"
    }
  }
}